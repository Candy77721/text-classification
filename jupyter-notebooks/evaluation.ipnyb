{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This Jupyter notebook contains the code to evaluate the sentence classification and extractive summarization outputs based upon accuracy, precision, and recall."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sentence classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Accuracy, false positives, false negatives\n",
    "#### Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pickle\n",
    "import seaborn as sns; sns.set()\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_obj(name):\n",
    "    with open(\"../obj/\" + name + \".pkl\", \"rb\") as f:\n",
    "        return pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = load_obj(\"pred_y\")\n",
    "true = load_obj(\"true_y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_accuracy(true, pred):\n",
    "    false_pos = []\n",
    "    true_pos = []\n",
    "    false_neg = []\n",
    "    for x in range(0,len(pred)):\n",
    "        class_p = []\n",
    "        class_t = []\n",
    "        for i, val in enumerate(pred[x]):\n",
    "            if val > 0.5:\n",
    "                class_p.append(i + 1)\n",
    "\n",
    "        for i, val in enumerate(true[x]):\n",
    "            if val == 1.:\n",
    "                class_t.append(i + 1)\n",
    "        false_pos.append([x for x in class_p if x not in class_t])\n",
    "        false_neg.append([x for x in class_t if x not in class_p])\n",
    "        true_pos.append([x for x in class_t if x in class_p])\n",
    "\n",
    "    false_pos = [x for sublist in false_pos for x in sublist]\n",
    "    true_pos = [x for sublist in true_pos for x in sublist]\n",
    "    false_neg = [x for sublist in false_neg for x in sublist]\n",
    "    true_count = [true_pos.count(i) for i in range(1,18)]\n",
    "    false_count = [false_pos.count(i) + false_neg.count(i) for i in range(1,18)]\n",
    "    print(\"Correct | Incorrect\\n________|__________\")\n",
    "    for i in range(1,18):\n",
    "        print(true_pos.count(i), \" \" * (6 - len(str(true_pos.count(i)))), \"|\", false_pos.count(i) + false_neg.count(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correct | Incorrect\n",
      "________|__________\n",
      "84      | 610\n",
      "129     | 256\n",
      "98      | 252\n",
      "30      | 121\n",
      "0       | 100\n",
      "91      | 159\n",
      "301     | 309\n",
      "13      | 88\n",
      "20      | 155\n",
      "0       | 18\n",
      "2       | 167\n",
      "38      | 184\n",
      "78      | 375\n",
      "19      | 78\n",
      "62      | 215\n",
      "3       | 29\n",
      "25      | 121\n"
     ]
    }
   ],
   "source": [
    "calc_accuracy(true, pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Multi-task training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_m = load_obj(\"preds_multi\")\n",
    "true_m = load_obj(\"true_y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correct | Incorrect\n",
      "________|__________\n",
      "333     | 558\n",
      "222     | 211\n",
      "86      | 256\n",
      "30      | 77\n",
      "24      | 97\n",
      "119     | 130\n",
      "323     | 245\n",
      "0       | 84\n",
      "48      | 119\n",
      "0       | 17\n",
      "6       | 148\n",
      "45      | 147\n",
      "29      | 290\n",
      "26      | 74\n",
      "96      | 203\n",
      "0       | 24\n",
      "0       | 82\n"
     ]
    }
   ],
   "source": [
    "calc_accuracy(true, pred_m[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Accuracy - Number of classes\n",
    "#### Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_nclasses(true, pred):\n",
    "    true_class = []\n",
    "    pred_class = []\n",
    "    for x in range(0, len(pred)):\n",
    "        pred_count = [i for i in pred[x] if i > 0.5]\n",
    "        true_count = [i for i in true[x] if i == 1.]\n",
    "        pred_class.append(len(pred_count))\n",
    "        true_class.append(len(true_count))\n",
    "    cm = np.zeros((6, 5), dtype=int)\n",
    "    np.add.at(cm, [true_class, pred_class], 1)\n",
    "    return(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm_base = calc_nclasses(true, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0,   0,   0,   0,   0],\n",
       "       [219, 537, 121,  11,   8],\n",
       "       [338, 461, 136,  44,   1],\n",
       "       [ 32,  51,  33,   0,   0],\n",
       "       [  9,   6,   4,   4,   0],\n",
       "       [  7,   6,   0,   0,   0]])"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm_base"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multi-task"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm_multi = calc_nclasses(true_m, pred_m[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x720 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "fig, (ax1, ax2) = plt.subplots(2,1, figsize = (6, 10))\n",
    "g = sns.heatmap(cm_base, cmap=\"YlGnBu\", ax = ax1)\n",
    "g.set(xlabel = \"Pred\", ylabel = \"True\")\n",
    "g.set_title('Baseline GRU')\n",
    "\n",
    "h = sns.heatmap(cm_multi, cmap=\"YlGnBu\", ax=ax2)\n",
    "h.set(xlabel = \"Pred\", ylabel = \"True\")\n",
    "h.set_title(\"Multi-task classifier\")\n",
    "plt.savefig(\"try.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summarization precision & recall"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multi-task"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_sum = pred_m[1]\n",
    "true_sum = load_obj(\"doc_y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "def summarization_metrics(true, pred):\n",
    "    recall_all = []\n",
    "    precision_all = []\n",
    "    for i, val_i in enumerate(pred):\n",
    "        count_pred = []\n",
    "        count_true = []\n",
    "        for x, val in enumerate(pred[i]):\n",
    "            if val > 0.5:\n",
    "                count_pred.append(x)\n",
    "            if true_sum[i][x] == 1.:\n",
    "                count_true.append(x)\n",
    "        if len(count_pred) > 0:\n",
    "            recall = len([x for x in count_true if x in count_pred])/len(count_true)\n",
    "            precision = len([x for x in count_pred if x in count_true])/len(count_pred)\n",
    "            recall_all.append(recall)\n",
    "            precision_all.append(precision)\n",
    "        precision = np.mean(list(set(precision_all)))\n",
    "        recall = np.mean(list(set(recall_all)))\n",
    "    print(\"Precision: {}\\nRecall: {}\".format(round(precision, 3), round(recall, 3)))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.456\n",
      "Recall: 0.459\n"
     ]
    }
   ],
   "source": [
    "summarization_metrics(true_sum, pred_sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_baseline = load_obj(\"sentence_extraction\")\n",
    "true_baseline = load_obj(\"sentence_extraction_true\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.221\n",
      "Recall: 0.324\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/johnbrandt/anaconda3/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2957: RuntimeWarning: Mean of empty slice.\n",
      "  out=out, **kwargs)\n",
      "/Users/johnbrandt/anaconda3/lib/python3.6/site-packages/numpy/core/_methods.py:80: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  ret = ret.dtype.type(ret / rcount)\n"
     ]
    }
   ],
   "source": [
    "summarization_metrics(true_baseline, pred_baseline)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
